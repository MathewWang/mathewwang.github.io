<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Summary | 马修修的技术博客]]></title>
  <link href="http://mathewwang.github.io/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://mathewwang.github.io/"/>
  <updated>2015-11-23T13:58:08+08:00</updated>
  <id>http://mathewwang.github.io/</id>
  <author>
    <name><![CDATA[马修修]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reactive Native学习曲线]]></title>
    <link href="http://mathewwang.github.io/blog/2015/11/20/reactive-nativexue-xi-qu-xian/"/>
    <updated>2015-11-20T09:51:22+08:00</updated>
    <id>http://mathewwang.github.io/blog/2015/11/20/reactive-nativexue-xi-qu-xian</id>
    <content type="html"><![CDATA[<h1>移动端同学快速学习ReactNative的学习曲线（转载）</h1>

<p>作为移动前端开发人员，这两天对React-Native以及所涉及的一些必须的技术进行了一下恶补，把网上比较好的学习资料搜集了一下，方便感兴趣的同学更快的了解和切入RN的开发，并且快速扫清背景知识。
大家都不是新手，所以，我们不从“hello world”开始，而是针对以前没有前端开发经历的客户端开发同学，从最基础的背景技术开始演进：</p>

<h3>HTML（学习时间30分钟）：</h3>

<p>或多或少，大家肯定对HTML还是有所了解的，在开始前端之旅前，有必要系统的扫一下基础，推荐教程：<a href="http://www.jb51.net/shouce/html/html.htm">http://www.jb51.net/shouce/html/html.htm</a></p>

<h3>Javascript （学习时间2小时）：</h3>

<p>做前端开发，怎能不了解Javascript，还是花2个小时，静下心来，系统的学习一下，推荐教程：<a href="http://www.w3school.com.cn/js/index.asp">http://www.w3school.com.cn/js/index.asp</a></p>

<h3>CSS</h3>

<p>由于React-Native并不直接使用CSS文件定义样式，所以这部分可以先不看。</p>

<h3>Node.js（学习时间2小时）：</h3>

<p>由于React-Native是利用Node.js来搭建Javascript代码的，所以，最好也花点时间，稍微了解一下，推荐教程：<a href="http://www.runoob.com/nodejs/nodejs-callback.html">http://www.runoob.com/nodejs/nodejs-callback.html</a></p>

<h3>ECMAScript6（学习时间8小时）：</h3>

<p>学习了传统的Javascript基础，你会发现还是看不懂React-Native的代码，那是因为RN是遵循ES6的规范标准的，这个标准是2015年6月份才正式发布的，那是相当的新啊。传统Javascript语法上其实和c、java非常相似，很容易理解，但是ES6的很多语法和编译型语言相差很大，所以也需要多一些时间来学习。推荐教程：<a href="http://es6.ruanyifeng.com/#docs/intro">http://es6.ruanyifeng.com/#docs/intro</a></p>

<h3>React（学习时间1小时）：</h3>

<p>在学习React-Native之前，最好先了解一下React，毕竟RN就是从React演化来的，很多写法和思路是一致的。完整的学习是需要一定时间的，偷下懒，找个简单的入门教程，花1个小时就可以了解React的主要思路了：<a href="http://www.cocoachina.com/webapp/20150721/12692.html">http://www.cocoachina.com/webapp/20150721/12692.html</a></p>

<h3>React-Native（入门学习12小时）：</h3>

<p>最后才到我们的主角，但有了前面这些基础的铺垫，就算你没有前端开发的经历，理解RN也不困难了。这里有翻译好的官方文档：<a href="http://wiki.jikexueyuan.com/project/react-native/GettingStarted.html">http://wiki.jikexueyuan.com/project/react-native/GettingStarted.html</a>，前面的章节翻译的都不错，但是后面几章翻译的就有点烂了，如果看不下去，就直接看原版的吧：<a href="http://facebook.github.io/react-native/docs/getting-started.html">http://facebook.github.io/react-native/docs/getting-started.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何通过octopress搭建博客]]></title>
    <link href="http://mathewwang.github.io/blog/2015/10/27/ru-he-tong-guo-octopressda-jian-bo-bo-ke/"/>
    <updated>2015-10-27T23:38:23+08:00</updated>
    <id>http://mathewwang.github.io/blog/2015/10/27/ru-he-tong-guo-octopressda-jian-bo-bo-ke</id>
    <content type="html"><![CDATA[<hr />

<p>工作几年了，突然发现自己居然没有博客，这怎么行！！！前几天看到同事们的博客都搞的很像模像样的，自己也手痒，就花了两天时间用octopress＋github pages搭了一个，至于为什么用octopress，当然是因为唐巧大神也在用啊，从他那边看了好多很不错的文章，深感敬佩。既然是需要自己动手做，自然会遇到一些莫名奇妙的问题，下面就是介绍我自己是如何搭的：</p>

<h2>准备工作</h2>

<p>Mac一台并且配好了github SSH访问权限，已注册好github，可以正常访问github的网络</p>

<h2>Github pages配置</h2>

<p>关于Github pages的配置在<a href="https://pages.github.com">Github pages</a>官网有很详细的介绍，按照上面的步骤一步一步来就好了。这里假设你的github pages的路径是“user_name.github.io”.</p>

<h2>Ruby环境安装</h2>

<p>ruby的安装有多种方式，我这里用的是rbenv来安装的：</p>

<h3>rbenv安装</h3>

<p>可以参考<a href="http://octopress.org/docs/setup/rbenv/">rben安装</a></p>

<pre><code> cd
 git clone git://github.com/sstephenson/rbenv.git .rbenv
 echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
 echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
 git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
 source ~/.bash_profile
</code></pre>

<h3>安装ruby</h3>

<p>我这里使用ruby的2.2.3版本</p>

<pre><code>rbenv install 2.2.3
rbenv local 2.2.3
rbenv rehash  //这个命令很重要
</code></pre>

<h2>octopress安装和配置</h2>

<p>重头戏来了，这里就是安装octopress,我在这里卡了好久，octopress是从github上直接拉去的，请参考下面的命令：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
rbenv rehash    # 这个一定执行
bundle install
rake install  #这个命令执行完之后会在octopress目录下面生成一个“source”文件夹
</code></pre>

<h4>这里有几个需要注意的地方：</h4>

<p>1.在执行gem之前先执行下面的命令将gem的源换成伟大的淘宝源：</p>

<pre><code>gem sources -l #查看当前的gem源
gem sources --remove https://rubygems.org/
gem sources -a https://ruby.taobao.org/  #注意这里已经变成https了，现在网上还有很多教程用http是不对的
</code></pre>

<p>2.执行完上面的操作之后你会发现为什么我的gem命令还是去<a href="">https://rubygems.org/</a>,这是因为octopress项目里面的Gemfile里依然用的还是用之前的，并且项目的优先级是高于全局配置的，这里只要修改一下就可以了。</p>

<p>3.最后在执行“bundle install”的时候，我遇到了一个报错说“RedCloth －v ‘4.2.9’” 安装失败，不太清楚具体的原因。。。然后我就想了一个方法绕过去，先单独执行“gem install RedCloth －v ‘4.2.9’” 将它安装成功，然后将这个依赖从octopress的Gemfile中删掉就好了。</p>

<h2>关联github和本地的octopress</h2>

<pre><code>rake setup_github_pages
</code></pre>

<p>执行这个命令时会需要输入github pages对应的那个repos路径，按照提示输入并确定即可。执行完之后会在octopress目录上生成一个“<em>deploy”的目录，之后生成的博客内容都是在这个文件夹上，另外这里还是将octopress目录指向你github pages repos对应的新source分支，并且将“</em>deploy”指向master分支。以后博客的内容(_deploy目录里的文件)会被push到master分支，而其它的文件会被放到source分支，当你在新的电脑上写博客的时候直接配置好本地的octopress环境，然后用github上的source和master分支覆盖本地的对应目录然后执行“rake setup_github_pages”就又可以愉快的写博客啦。</p>

<h2>简单blog发布</h2>

<p>所有的配置工作准备好了之后就是写博客和发布博客啦，octopress使用了rake的下面几个task来完成博客的html文件生成和发布，具体可以参考<a href="http://octopress.org/docs/blogging/">这里</a>：</p>

<pre><code>rake new_post["blog_title"]   #这个命令就是生存博客的框架，是一个markdown文件，写博客的时候直接修改这个文件就可以
rake generate  #将上面的markdown文件生成对应的html文件
rake preview   #博客预览，端口是4000，如：localhost:4000/blog/archives/index.html
rake deploy    #将生产的博客发布到你前面设置的对应的github page repos
</code></pre>

<h4>这里有几个注意的地方</h4>

<p>当需要deploy的时候最好是进到“_deploy”目录。如果push失败可以自己手动pull之后再push。当需要将博客正文以外的其它文件提交到source分支最好是进到“source”目录。因为octopress对应两个分支，在提交的时候应该要注意一些。</p>

<p>关于博客页面如何调整以及如何添加分享入口和评论，请参考下面唐巧的博客。</p>

<h2>引用</h2>

<p>这里有一些可以参考的文章</p>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的技术博客</a></p>
]]></content>
  </entry>
  
</feed>
